// Simple Translation Dictionaries

booleanValue ::= [
    "true"  : "true",
    "false" : "false",
    default : "null"
]

typeValue ::= [
    "Integer"  : "int",
    "Real"     : "double",
    "Boolean"  : "boolean",
    "String"   : "String",
    default    : "null"
]


typeFormat ::= [
    "Integer"  : "",
    "Real"     : "",
    "Boolean"  : "",
    "String"   : "",
    default    : "null"
]

operators ::= [
    "*"  : "*",
    ":"  : "/",
    "+"  : "+",
    "-"  : "-",
    default    : "null"
]

powerTypeCast ::= [
    "Integer" : "(int)",
    "Real" : "(double)",
    default : "null"
]


// Actual String Templates aka mendes big gay

//Generate Class
module(name,stat) ::= <<
public class <name> {        
    public static void main(String[] args){
        <stats(stat)>
    }
}
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

//Declare New Variable (and assign it a value if need-be)
init(value) ::= "<if(value)> = <value><endif>" //Check if there's a value
declaration(type,var,value) ::= "<typeValue.(type)> <var><init(value)>;"


//Assign Value to Variable
assign(stat,var,value) ::= <<
<stats(stat)>
<var> = <value>;
>>


//Print expression
print(stat,expr) ::= <<
<stats(stat)>
System.out.println(<expr>);
>>


//Input from user - TODO: ASK HOW TO DO INPUT PROPERLY
input(stat, prompt) ::= <<
<stats(stat)>
System.out.print(<prompt>);
sc.nextLine();
>>

//Expression (will always be binary)
expression(type,var,e1,op,e2) ::= "<declaration(type,var,[e1,\" \",operators.(op),\" \",e2])>"

//Power expression
powerExpr(type,var,e1,e2) ::= "<declaration(type,var,[powerTypeCast.(type),\"Math.pow(\", e1, \", \", e2, \")\"])>"